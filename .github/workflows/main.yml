name: Acceptance Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  original: "Hello, World!"
  transformed: "Uryyb, Jbeyq!"

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.3.1

      - name: Install Task
        uses: go-task/setup-task@v1
        with:
          repo-token: ${{ github.token }}
          version: '3.x'

      - name: Install ActionLint
        shell: bash
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash) latest /usr/local/bin

      - name: Install dependencies
        run: task install

      - name: Build action
        run: task build

      - name: Ensure action build is current
        run: |
          if ! git diff --exit-code --name-only; then
            echo "::error::Files were mutated during build. Run 'task build' before committing and pushing."
            exit 1
          fi

      - name: Lint code
        run: task lint

      - name: Run tests
        run: task test

  test-local-action:
    name: Test local action
    strategy:
      matrix:
        runner: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Test with valid input
        uses: ./
        id: valid
        with:
          string: ${{ env.original }}

      - name: Fail if output is incorrect
        if: steps.valid.outputs.result != env.transformed
        run: |
          echo "::error::Expected result of transformation was '${{ env.transformed }}', but got '${{ steps.valid.outputs.result }}'"
          exit 1

      - name: Test with empty input
        uses: ./
        id: invalid
        continue-on-error: true
        with:
          string: ""

      - name: Fail if empty input succeeds
        if: steps.invalid.outcome != 'failure'
        run: |
          echo "::error::Expected action to fail when given empty input, but it succeeded."
          exit 1

  release:
    name: Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-unit, test-local-action]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine next version
        id: version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          create_annotated_tag: true
          dry_run: true

      - name: Release new version
        if: steps.version.outputs.new_version != steps.version.outputs.previous_version
        run: |
          function push() {
            local tag="$1"
            git tag -fa "$tag" -m "Release $tag"
            git push origin "$tag" --force  
          }
          
          git config user.name "$USERNAME"
          git config user.email "$EMAIL"
          
          push "$TAG"
          push "$(echo "$TAG" | cut -d . -f 1)"
          push "$(echo "$TAG" | cut -d . -f 1-2)"
          
          gh release create "$TAG" --title "Release $TAG" --notes "$CHANGELOG" --verify-tag
        env:
          USERNAME: github-actions[bot]
          EMAIL: github-actions[bot]@users.noreply.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.version.outputs.new_tag }}
          CHANGELOG: ${{ steps.version.outputs.changelog }}

  test-tagged-action:
    name: Test tagged action
    runs-on: ubuntu-latest
    needs: [release]
    permissions:
      contents: read

    steps:
      - name: ROT-13
        uses: nikoheikkila/rot-13-action@v1
        id: valid
        with:
          string: ${{ env.original }}

      - name: Fail expectation
        if: steps.valid.outputs.result != env.transformed
        run: |
          echo "::error::Expected result of transformation was '${{ env.transformed }}', but got '${{ steps.valid.outputs.result }}'"
          exit 1

      - name: Test with empty input
        uses: nikoheikkila/rot-13-action@v1
        id: invalid
        continue-on-error: true
        with:
          string: ""

      - name: Fail if empty input succeeds
        if: steps.invalid.outcome != 'failure'
        run: |
          echo "::error::Expected action to fail when given empty input, but it succeeded."
          exit 1
